package com.Royal.SCM.Controllers;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import dto.EmailResponse;
import dto.IntentRequest;


@RestController
@RequestMapping("/api/email")
public class EmailAIController {

@Value("${gemini.api.key}")
private String GEMINI_API_KEY;


    @PostMapping("/generate")
    public ResponseEntity<EmailResponse> generateEmail(@RequestBody IntentRequest request) {
        String prompt = """
You are a polite and professional assistant. Write a short and clear email that the user can send to %s for the following purpose: "%s".

Use a friendly greeting, 2-3 line message, and a sign-off like 'Regards' or 'Best wishes'.
""".formatted(request.getRecipientName(), request.getIntent());


        String aiGenerated = callGemini(prompt);
        return ResponseEntity.ok(new EmailResponse(aiGenerated));
    }
private String callGemini(String prompt) {
    String endpoint = 
      "https://generativelanguage.googleapis.com/v1/models/gemini-2.5-flash:generateContent?key=" 
      + GEMINI_API_KEY;

    RestTemplate rest = new RestTemplate();
    HttpHeaders headers = new HttpHeaders();
    headers.setContentType(MediaType.APPLICATION_JSON);

    Map<String, Object> part = Map.of("text", prompt);
    Map<String, Object> message = Map.of("parts", List.of(part));
    Map<String, Object> body = Map.of("contents", List.of(message));

    HttpEntity<Map<String, Object>> entity = new HttpEntity<>(body, headers);

    try {
        ResponseEntity<Map> response = 
           rest.postForEntity(endpoint, entity, Map.class);
        List<Map<String, Object>> candidates = 
           (List<Map<String, Object>>) response.getBody().get("candidates");
        if (candidates != null && !candidates.isEmpty()) {
            Map<String, Object> content = 
               (Map<String, Object>) candidates.get(0).get("content");
            List<Map<String, Object>> parts = 
               (List<Map<String, Object>>) content.get("parts");
            return (String) parts.get(0).get("text");
        }
        return "⚠️ No content generated by Gemini.";
    } catch (Exception e) {
        e.printStackTrace();
        return "❌ Gemini error: " + e.getMessage();
    }
}

}

